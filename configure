#!/usr/bin/guile \
-l gash-base-lib -e main -s
!#

(let ((extension-path (format #f "~a/libgash.so" (getcwd)))
      (init-function "init_gash_c"))
  (load-extension extension-path init-function))

(define cc "gcc")
(define cflags "`pkg-config --cflags readline guile-2.2`")
(define linkdir "/bin/")

(define (build-libgash)
  (echo "compiling libgash.so")
  (system-fmt
   "~a ~a -shared -o libgash.so -fPIC libgash.c -l readline" cc cflags)
  (echo "setting gash to be executable")
  (system "chmod +x gash"))

(define (link-gash-libs)
  (echo "linking gash libraries")
  (system-fmt "sudo cp ~a/gash-base-lib /usr/local/lib/gash-base-lib" (getcwd))
  (system-fmt "sudo cp ~a/libgash.so /usr/local/lib/libgash.so" (getcwd))
  (system-fmt "sudo cp ~a/history.scm /usr/local/lib/history.scm" (getcwd)))

(define (link-gash . location)
  (if (null? location)
      (system-fmt "sudo cp ~a/gash /usr/local/bin/gash" (getcwd))
      (system-fmt "sudo cp ~a/gash ~a" (getcwd) (car location))))

(define (clean-gash)
  (let ((path (collect-shell-command "which gash")))
    (display "cleaning ") (echo path)
    (system-fmt "rm ~a" (car path))))

;; (define (reinstall))
(define (smart-reinstall)
  (let ((path (collect-shell-command "which gash")))
    (cond ((directory? (car path))
	   (build-libgash)
	   (link-gash-libs)
	   (display "cleaning ")
	   (echo path)
	   (system-fmt "rm ~a" (car path))
	   (system-fmt "ln ~a/gash ~a" (getcwd) path))
	  (else
	   (echo "GASH not in path, re run with --install")))))

(define (main . args)
  (if (null? (cdr (car args)))
      (build-libgash)
      (for-cmd-line
       ((-ll) (link-gash-libs))
       ((--clean) (clean-gash))
       ((--reinstall) (smart-reinstall))
       ((--install)
        (build-libgash)
	(link-gash-libs)
	(link-gash)))))

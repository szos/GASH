#!/usr/bin/guile \
-l gash-base-lib -e main -s
!#

(use-modules (ice-9 format)
	     (ice-9 popen)
	     (ice-9 rdelim)
	     (ice-9 textual-ports)
	     (ice-9 session)
	     (ice-9 regex)
	     (ice-9 buffered-input))

(let ((extension-path (format #f "~a/libgash.so" (getcwd)))
      (init-function "init_gash_c"))
  (load-extension extension-path init-function))

(define cc "gcc")
(define cflags "`pkg-config --cflags readline guile-2.2`")
(define execdir "/usr/local/bin")
(define libsdir "/usr/local/lib")
(define single-file-name "gash-single-file")

(define (build-libgash)
  (echo "compiling libgash.so")
  (system-fmt
   "~a ~a -shared -o libgash.so -fPIC libgash.c -l readline" cc cflags)
  (echo "setting gash to be executable")
  (system "chmod +x gash"))

(define (link-gash-libs)
  (echo "linking gash libraries")
  (system-fmt "sudo cp ~a/gash-base-lib /usr/local/lib/gash-base-lib" (getcwd))
  (system-fmt "sudo cp ~a/libgash.so /usr/local/lib/libgash.so" (getcwd))
  (system-fmt "sudo cp ~a/history.scm /usr/local/lib/history.scm" (getcwd)))

(define (link-gash . location)
  (if (null? location)
      (system-fmt "sudo cp ~a/gash /usr/local/bin/gash" (getcwd))
      (system-fmt "sudo cp ~a/gash ~a" (getcwd) (car location))))

(define (clean-gash)
  (let ((path (collect-shell-command "which gash")))
    (display "cleaning ") (echo path)
    (system-fmt "rm ~a" (car path))))

;; (define (reinstall))
(define (smart-reinstall)
  (let ((path (collect-shell-command "which gash")))
    (cond ((directory? (car path))
	   (build-libgash)
	   (link-gash-libs)
	   (display "cleaning ")
	   (echo path)
	   (system-fmt "rm ~a" (car path))
	   (system-fmt "ln ~a/gash ~a" (getcwd) path))
	  (else
	   (echo "GASH not in path, re run with --install")))))

(define (main . args)
  (if (null? (cdr (car args)))
      (build-libgash)
      (for-cmd-line
       ((--local)
	(echo "building gash.test.o, should be inspected")
	(build-gash-file-local))
       ((--echo-stuff)
	(echo gash-code-local))
       ((-ll) (link-gash-libs))
       ((--clean) (clean-gash))
       ((--reinstall) (smart-reinstall))
       ((--install)
        (build-libgash)
	(link-gash-libs)
	(link-gash))
       ((--single)
	(generate-gash-as-single-file #t))
       ((--install-with-local)
	;; (single-file-gash-install)
	(install-gash-single-file "gash-single-file")
	;; (link-gash-locally "gash-single-file")
	)
       )))

(define gash-code
  (let* ((port (open-file "gash-code.scm" "r"))
	 (text (get-string-all port)))
    (close-port port)
    text))

(define gash-load-dynamic-code-local
  (let* ((1st-line "#!/usr/bin/guile \\")
	 (2nd-line (format #f "-l ~a/gash-base-lib -e main -s" (getcwd)))
	 (3rd-line "!#")
	 (n (list->string '(#\newline)))
	 (shebang (string-append 1st-line n 2nd-line n 3rd-line n n)))
    (let ((code-to-load-libgash.so
	   (format #f "(let ((extension-path \"~a/libgash.so\")
                             (init-function \"init_gash_c\"))
                         (load-extension extension-path init-function))"
		   (getcwd))))
      (string-append shebang code-to-load-libgash.so n
		    ";;; the above was generated by configure, please inspect!"
		    n n))))

(define gash-load-dynamic-code-installed
  (let* ((1l "#!/usr/bin/guile \\")
	 (2l (format #f "-l ~a/gash-base-lib -e main -s" libsdir))
	 (3l "!#")
	 (n (list->string '(#\newline)))
	 (shebang (string-append 1l n 2l n 3l n n)))
    (let ((code-to-load-libgash.so
	   (format #f "(let ((extension-path \"~a/libgash.so\")
                             (init-function \"init_gash_c\"))
                         (load-extension extension-path init-function))"
		   libsdir)))
      (string-append shebang code-to-load-libgash.so n
		     ";;; the above was generated by configure, please inspect!"
		     n n)))
  ;; (let* ((port (open-file "configure-gash-load-installed" "r"))
  ;; 	 (text (get-string-all port)))
  ;;   (close-port port)
  ;;   text)
  )

(define gash-single-file-head
  (let* ((port (open-file "conf-gash-libs-and-gash-all-together" "r"))
	 (text (get-string-all port)))
    (close-port port)
    text))

;; (define gash-single-file
;;   (let* ((history-port (open-file "history.scm" "r"))
;; 	 (history (get-string-all history-port))
;; 	 (base-lib-port (open-file "gash-base-lib" "r"))
;; 	 (base-lib #f))
;;     (read-line base-lib-port)
;;     (read-line base-lib-port)
;;     (read-line base-lib-port)
;;     (set! base-lib (get-string-all base-lib-port))
;;     (string-append base-lib (list->string '(#\newline #\newline))
;; 		   history (list->string '(#\newline #\newline))
;; 		   gash-code)))

;; (define (print-stuff)
;;   (let* ((base-lib-port (open-file "gash-base-lib" "r"))
;; 	 (base-lib-line-1 (read-line base-lib-port))
;; 	 (base-lib-line-2 (read-line base-lib-port))
;; 	 (base-lib-line-3 (read-line base-lib-port))
;; 	 (rest (get-string-all base-lib-port)))
;;     (close-port base-lib-port)
;;     (display base-lib-line-1) (newline)
;;     (display base-lib-line-2) (newline)
;;     (display base-lib-line-3) (newline)
;;     (display rest) (newline)))

(define (build-gash-file-local)
  (let ((file-text
	 (string-append
	  gash-load-dynamic-code-local
	  (list->string '(#\newline #\newline))
	  ";;; above is code to load the necessary libraries for GASH,
"
	  ";;; libgash.so, history.scm, and gash-base-lib will be loaded
"
	  (format #f ";;; from the local directory, ~a" (getcwd))
	  (list->string '(#\newline #\newline))
	  gash-code)))
    (let ((port (open-file "gash.test.o" "w")))
      (display file-text port)
      (close-port port))))

;; (define (link-gash-locally from . to)
;;   (if (null? to)
;;       (system-fmt "sudo ln -s ~a ~a" from "/usr/local/bin/gash-local")
;;       (system-fmt "sudo ln -s ~a ~a" from to)))

(define (install-gash-single-file from . to)
  (if (null? to)
      (system-fmt "sudo cp ~a ~a" from "/usr/local/bin/gash-local")
      (system-fmt "sudo cp ~a ~a" from to)))

;; (define (main . xyz)
;;   (let* ((cmdl (car xyz))
;; 	 (command (car cmdl))
;; 	 )
;;     ()))

;; (define (single-file-gash-install)
;;   (let ((port (open-file "gash-single-file" "w")))
;;     (display (string-append gash-single-file-head gash-code) port)
;;     (close-port port)))

(define (generate-load-path . path)
  (string-append "#!/usr/bin/guile \\
-l "
		 (if (null? path)
		     (getcwd)
		     (car path))
		 "/gash-base-lib -e main -s"
		 "
!#

(let ((ext-path (format #f \"~a/libgash.so\" "
		  (if (null? path)
		      (getcwd)
		      (car path))
		  ")))
  (load-extension ext-path \"init_gash_c\"))

"
		  ))

(define gash-and-history-as-string
  (let ((gash-port (open-file "gash" "r"))
	;; (gash-base-lib-port (open-file "gash-base-lib" "r"))
	(history-port (open-file "history.scm" "r")))
    (define (trash-x-lines-from-port x port)
      (for v from 1 to x
	   (read-line port)))
    (trash-x-lines-from-port 3 gash-port)
    (let ((gash-text (get-string-all gash-port))
	  ;; (gash-base-lib-text (get-string-all gash-base-lib-port))
	  (history-text (get-string-all history-port)))
      (string-append gash-text history-text))))

(define (generate-gash-as-single-file . local?)
  "This function generates a file which contains history and gash propper. This
file name is held in single-file-name. "
  (display "about to enter let for gash-single-file") (newline)
  (let ((header (if (not (null? local?))
		    gash-load-dynamic-code-local
		    gash-load-dynamic-code-installed))
	(port (open-file single-file-name "w"))
	(code gash-and-history-as-string)
	)
    (display "about to write to gash-single-file") (newline)
    (display (string-append header code
			    ) port)
    (close-port port))
  ;; (if (null? local?)
  ;;     (begin (display (format #f "copying to ~a and ~a" execdir libsdir))
  ;; 	     (system-fmt "sudo cp gash-base-lib ~a/gash-base-lib" libsdir)
  ;; 	     (system-fmt "sudo cp libgash.so ~a/libgash.so" libsdir)
  ;; 	     (system-fmt "sudo cp gash-single-file ~a/gash" execdir))
  ;;     ())
  )

(define installed-name "gash-local")

(define (install-single-file-gash local?)
  (if local? ;; if we have generated load strings that reference the current dir
      (system-fmt "sudo cp gash-single-file ~a/~a" execdir)
      ;; otherwise copy over all the libs and whatnot.
      (begin (display (format #f "copying to ~a and ~a" execdir libsdir))
 	     (system-fmt "sudo cp gash-base-lib ~a/gash-base-lib" libsdir)
 	     (system-fmt "sudo cp libgash.so ~a/libgash.so" libsdir)
 	     (system-fmt "sudo cp gash-single-file ~a/gash" execdir))))
